{"version":3,"sources":["Message.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Message","forwardRef","ref","message","username","isUser","className","Card","CardContent","Typography","variant","component","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","input","setInput","messages","setMessages","setUsername","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","question","prompt","toLowerCase","src","FormControl","InputLabel","Input","style","flex","value","onChange","event","target","IconButton","color","type","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","disabled","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"0VA4BeA,G,MAvBCC,sBAAW,WAAwBC,GAAS,IAA9BC,EAA6B,EAA7BA,QAASC,EAAoB,EAApBA,SAC/BC,EAASF,EAAQC,WAAaA,EAEpC,OACE,yBAAKF,IAAKA,EAAKI,UAAS,uBAAkBD,GAAU,iBAClD,kBAACE,EAAA,EAAD,CAAMD,UAAWD,EAAS,mBAAqB,qBAC7C,kBAACG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEH,UACED,EAAS,wBAA0B,wBAErCK,QAAQ,KACRC,UAAU,OAERN,GAAD,UAAcF,EAAQC,UAAY,eAAlC,MACAD,EAAQA,gB,yBCLNS,EAbKC,IAASC,cAAc,CACzCC,OAAQ,0CACRC,WAAY,iDACZC,YAAa,wDACbC,UAAW,iCACXC,cAAe,6CACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGMC,Y,iCC6ERC,MAhFf,WAAe,MAEaC,mBAAS,IAFtB,mBAENC,EAFM,KAECC,EAFD,OAGmBF,mBAAS,IAH5B,mBAGNG,EAHM,KAGIC,EAHJ,OAImBJ,qBAJnB,mBAINrB,EAJM,KAII0B,EAJJ,KAmCb,OA7BAC,qBAAU,WAERnB,EAAGoB,WAAW,YACXC,QAAQ,YAAa,QACrBC,YAAW,SAACC,GACXN,EACEM,EAASC,KAAKC,KAAI,SAACC,GAAD,MAAU,CAAEC,GAAID,EAAIC,GAAIpC,QAASmC,EAAIE,iBAG5D,IAEHT,qBAAU,WACR,IAAMU,EAAWC,OAAO,0BAExBZ,EAD6B,KAAbW,EACM,KAAOA,EAASE,iBACrC,IAeD,yBAAKrC,UAAU,aACb,yBAAKA,UAAU,mBACb,wBAAIA,UAAU,SACZ,yBAAKsC,IAAI,mGAEX,wBAAItC,UAAU,SAAd,WAA+BF,IAEjC,0BAAME,UAAU,mBACd,kBAACuC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,2BACA,kBAACC,EAAA,EAAD,CACEC,MAAO,CAAEC,KAAM,GACfC,MAAOxB,EACPyB,SAAU,SAACC,GAAD,OAAWzB,EAASyB,EAAMC,OAAOH,UAG7C,kBAACI,EAAA,EAAD,CACEN,MAAO,CAAEC,KAAM,GACf3C,UAAU,eACVI,QAAQ,YACR6C,MAAM,UACNC,KAAK,SACLC,QAnCU,SAACL,GAEnBA,EAAMM,iBAEN9C,EAAGoB,WAAW,YAAY2B,IAAI,CAC5BxD,QAASuB,EACTtB,SAAUA,EACVwD,UAAW/C,IAASU,UAAUsC,WAAWC,oBAE3CnC,EAAS,KA2BDoC,UAAWrC,GAEX,kBAAC,IAAD,SAIN,kBAAC,IAAD,CAAUpB,UAAU,qBACjBsB,EAASS,KAAI,gBACVE,EADU,EACVA,GAAIpC,EADM,EACNA,QADM,OAGZ,kBAAC,EAAD,CACE6D,IAAKzB,EACLnC,SAAUA,EACVD,QAASA,UCtED8D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM9E,c","file":"static/js/main.636c2400.chunk.js","sourcesContent":["import React, { forwardRef } from \"react\";\r\nimport { Card, Typography, CardContent } from \"@material-ui/core\";\r\nimport FlipMove from \"react-flip-move\";\r\nimport \"./Message.css\";\r\n\r\nconst Message = forwardRef(({ message, username }, ref) => {\r\n  const isUser = message.username === username;\r\n\r\n  return (\r\n    <div ref={ref} className={`message_card ${isUser && \"message_user\"}`}>\r\n      <Card className={isUser ? \"message_userCard\" : \"message_guestCard\"}>\r\n        <CardContent>\r\n          <Typography\r\n            className={\r\n              isUser ? \"message_userCardTtext\" : \"message_guestCardText\"\r\n            }\r\n            variant=\"h5\"\r\n            component=\"h2\"\r\n          >\r\n            {!isUser && `${message.username || \"Unknown User\"}: `}\r\n            {message.message}\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Message;\r\n","import firebase from \"firebase\";\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n  apiKey: \"AIzaSyA3MPQgZe9AipU06fB115dFhB0wKtZaQT0\",\r\n  authDomain: \"facebook-messenger-clone-dba83.firebaseapp.com\",\r\n  databaseURL: \"https://facebook-messenger-clone-dba83.firebaseio.com\",\r\n  projectId: \"facebook-messenger-clone-dba83\",\r\n  storageBucket: \"facebook-messenger-clone-dba83.appspot.com\",\r\n  messagingSenderId: \"861946801008\",\r\n  appId: \"1:861946801008:web:2993c1cf2de48b26dcbdb5\",\r\n  measurementId: \"G-T298H5SMW1\",\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nexport default db;\r\n","import React, { useState, useEffect, Component } from \"react\";\nimport { Button, InputLabel, Input, FormControl } from \"@material-ui/core\";\nimport Message from \"./Message\";\nimport \"./App.css\";\nimport db from \"./firebase\";\nimport firebase from \"firebase\";\nimport FlipMove from \"react-flip-move\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport { IconButton } from \"@material-ui/core\";\n\nfunction App() {\n  //useState for temporary storage\n  const [input, setInput] = useState(\"\"); //what user types\n  const [messages, setMessages] = useState([]); //what user sends\n  const [username, setUsername] = useState();\n\n  useEffect(() => {\n    // a listener\n    db.collection(\"messages\")\n      .orderBy(\"timestamp\", \"desc\")\n      .onSnapshot((snapshot) => {\n        setMessages(\n          snapshot.docs.map((doc) => ({ id: doc.id, message: doc.data() })) //the id refers to firebase a bunch of letters and numbers\n        );\n      });\n  }, []);\n\n  useEffect(() => {\n    const question = prompt(\"Please Enter Your Name\");\n    const isEmpty = question === \"\";\n    setUsername(isEmpty ? null : question.toLowerCase());\n  }, []); //when don't want condition, use [] for onLoad\n\n  const sendMessage = (event) => {\n    //preventDefault to prevent default form submition function\n    event.preventDefault();\n    //all logic is here\n    db.collection(\"messages\").add({\n      message: input,\n      username: username,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n    });\n    setInput(\"\");\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"title-container\">\n        <h1 className=\"title\">\n          <img src=\"https://facebookbrand.com/wp-content/uploads/2019/10/Messenger_Logo_Color_RGB.png?w=100&h=100\"></img>\n        </h1>\n        <h3 className=\"title\">Welcome {username}</h3>\n      </div>\n      <form className=\"input_container\">\n        <FormControl>\n          <InputLabel>Enter a message...</InputLabel>\n          <Input\n            style={{ flex: 1 }}\n            value={input}\n            onChange={(event) => setInput(event.target.value)}\n          />\n\n          <IconButton\n            style={{ flex: 0 }}\n            className=\"input_button\"\n            variant=\"contained\"\n            color=\"primary\"\n            type=\"submit\"\n            onClick={sendMessage}\n            disabled={!input}\n          >\n            <SendIcon></SendIcon>\n          </IconButton>\n        </FormControl>\n      </form>\n      <FlipMove className=\"message_container\">\n        {messages.map((\n          { id, message } //username can refer to another person\n        ) => (\n          <Message\n            key={id}\n            username={username} //user who logined\n            message={message}\n          />\n        ))}\n      </FlipMove>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}